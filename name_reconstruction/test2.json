[{"symbol_data": {"function_name": {"original": "fts3SnippetFunc", "obscured": "sub004fdf70"}, "symbols": ["plVar18", "pvVar17", "iVar20", "bVar19", "iVar14", "iVar13", "plVar16", "uVar15", "lVar26", "iVar25", "lVar28", "uVar27", "pauVar22", "pcVar21", "uVar24", "piVar23", "uVar34", "uVar33", "iVar35", "__n", "puVar30", "iVar29", "uVar32", "pcVar31", "bVar40", "in_FS_OFFSET", "iVar37", "lVar36", "iVar39", "iVar38", "local_210", "local_1cc", "local_1c8", "param_2", "param_1", "local_1a8", "local_1a0", "param_3", "local_190", "local_184", "local_180", "local_178", "local_170", "local_148", "local_128", "uStack_d0", "local_124", "local_120", "piStack_c0", "local_11c", "local_118", "local_114", "local_110", "local_10c", "local_108", "plVar2", "iVar1", "local_100", "iVar4", "local_f8", "cVar3", "local_f0", "local_e8", "local_e0", "local_d8", "local_c8", "local_b8", "uVar10", "iVar9", "local_a8", "iVar12", "iVar11", "local_90", "lVar6", "local_40", "lVar5", "puVar8", "iVar7"]}, "decompiled_content": "\nvoid sub004fdf70(undefined8 param_1,int param_2,undefined8 *param_3)\n\n{\n  int iVar1;\n  long *plVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  long lVar6;\n  int iVar7;\n  undefined *puVar8;\n  int iVar9;\n  undefined4 uVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  uint uVar15;\n  long *plVar16;\n  void *pvVar17;\n  long *plVar18;\n  byte bVar19;\n  int iVar20;\n  code *pcVar21;\n  undefined (*pauVar22) [16];\n  int *piVar23;\n  undefined8 uVar24;\n  int iVar25;\n  long lVar26;\n  ulong uVar27;\n  long lVar28;\n  int iVar29;\n  undefined1 *puVar30;\n  char *pcVar31;\n  ulong uVar32;\n  ulong uVar33;\n  ulong uVar34;\n  size_t __n;\n  int iVar35;\n  long lVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  long in_FS_OFFSET;\n  bool bVar40;\n  ulong local_210;\n  int local_1cc;\n  undefined *local_1c8;\n  undefined *local_1a8;\n  ulong local_1a0;\n  undefined *local_190;\n  int local_184;\n  ulong local_180;\n  ulong local_178;\n  undefined (*local_170) [16];\n  int local_148;\n  int local_128;\n  undefined4 local_124;\n  int local_120;\n  int local_11c;\n  int local_118;\n  undefined4 local_114;\n  undefined4 local_110;\n  undefined4 local_10c;\n  undefined8 local_108;\n  undefined4 local_100 [2];\n  undefined1 *local_f8;\n  undefined8 local_f0;\n  long *local_e8;\n  undefined8 local_e0;\n  undefined local_d8 [8];\n  undefined8 uStack_d0;\n  undefined local_c8 [8];\n  int *piStack_c0;\n  undefined8 local_b8;\n  undefined local_a8 [24];\n  undefined local_90 [80];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (6 < param_2) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      sqlite3_result_error(param_1,\"wrong number of arguments to function snippet()\",0xffffffff);\n      return;\n    }\n    goto LAB_004fe89e;\n  }\n  plVar16 = (long *)sqlite3_value_pointer(*param_3,\"fts3cursor\");\n  if (plVar16 == (long *)0x0) {\n    puVar30 = (undefined1 *)sqlite3_mprintf(\"illegal first argument to %s\",\"snippet\");\n    sqlite3_result_error(param_1,puVar30,0xffffffff);\n    if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) goto LAB_004fe89e;\n    goto LAB_004fe20d;\n  }\n  switch(param_2) {\n  default:\n    iVar14 = -1;\n    iVar39 = 0xf;\n    local_190 = &DAT_0052596e;\n    local_1c8 = &DAT_00525963;\n    local_1a8 = &DAT_00525969;\n    goto LAB_004fe190;\n  case 2:\n    iVar14 = -1;\n    bVar40 = false;\n    iVar39 = 0xf;\n    local_1c8 = &DAT_00525963;\n    local_1a8 = &DAT_00525969;\n    goto LAB_004fe04f;\n  case 3:\n    bVar40 = false;\n    iVar14 = -1;\n    iVar39 = 0xf;\n    local_1c8 = &DAT_00525963;\n    goto LAB_004fe038;\n  case 4:\n    iVar14 = -1;\n    iVar39 = 0xf;\n    goto LAB_004fe023;\n  case 5:\n    iVar39 = 0xf;\n    break;\n  case 6:\n    iVar39 = sqlite3_value_int(param_3[5]);\n  }\n  iVar14 = sqlite3_value_int(param_3[4]);\nLAB_004fe023:\n  local_1c8 = (undefined *)sqlite3_value_text(param_3[3]);\n  bVar40 = local_1c8 == (undefined *)0x0;\nLAB_004fe038:\n  local_1a8 = (undefined *)sqlite3_value_text(param_3[2]);\n  bVar40 = (bool)(local_1a8 == (undefined *)0x0 | bVar40);\nLAB_004fe04f:\n  local_190 = (undefined *)sqlite3_value_text(param_3[1]);\n  if ((local_190 == (undefined *)0x0) || (bVar40)) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      sqlite3_result_error_nomem(param_1);\n      return;\n    }\n  }\n  else if (iVar39 == 0) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      pcVar21 = (code *)0x0;\n      uVar24 = 0xffffffff;\n      puVar30 = &DAT_00517c73;\n      goto LAB_004fe09f;\n    }\n  }\n  else {\nLAB_004fe190:\n    iVar11 = fts3CursorSeek(param_1,plVar16);\n    if (iVar11 == 0) {\n      local_f8 = (undefined1 *)0x0;\n      local_f0 = 0;\n      lVar5 = *plVar16;\n      if (plVar16[3] == 0) {\n        if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n          pcVar21 = (code *)0x0;\n          uVar24 = 0;\n          puVar30 = &DAT_00517c73;\nLAB_004fe09f:\n          sqlite3_result_text(param_1,puVar30,uVar24,pcVar21);\n          return;\n        }\n      }\n      else {\n        local_170 = (undefined (*) [16])local_a8;\n        iVar11 = 0x40;\n        if (iVar39 < 0x41) {\n          iVar11 = iVar39;\n        }\n        if (iVar11 < -0x40) {\n          iVar11 = -0x40;\n        }\n        lVar28 = 0;\n        do {\n          iVar35 = (int)lVar28;\n          local_184 = iVar35 + 1;\n          local_1cc = -iVar11;\n          if (-1 < iVar39) {\n            local_1cc = (iVar11 + iVar35) / local_184;\n          }\n          local_1a0 = 0;\n          local_210 = 0;\n          pauVar22 = local_170;\n          do {\n            *(undefined8 *)pauVar22[1] = 0;\n            *pauVar22 = (undefined  [16])0x0;\n            if (0 < *(int *)(lVar5 + 0x30)) {\n              iVar25 = 0;\n              local_148 = -1;\n              do {\n                if ((iVar14 == iVar25) || (iVar14 < 0)) {\n                  local_b8 = 0;\n                  _local_d8 = (undefined  [16])0x0;\n                  _local_c8 = (undefined  [16])0x0;\n                  piVar23 = (int *)plVar16[3];\n                  local_e0 = 0;\n                  local_100[0] = 0;\n                  iVar38 = *piVar23;\n                  local_e8 = plVar16;\n                  if (iVar38 == 5) {\n                    __n = 0x30;\n                    iVar38 = 1;\n                  }\n                  else {\n                    do {\n                      iVar12 = fts3ExprIterate2(*(undefined8 *)(piVar23 + 4),local_100,\n                                                fts3ExprLoadDoclistsCb);\n                      if ((iVar12 != 0) || (iVar38 == 2)) {\n                        if (iVar12 != 0) goto LAB_004fe856;\n                        __n = (long)(int)local_e0 * 0x30;\n                        iVar38 = (int)local_e0;\n                        goto LAB_004fe438;\n                      }\n                      piVar23 = *(int **)(piVar23 + 6);\n                      iVar38 = *piVar23;\n                    } while (iVar38 != 5);\n                    __n = (long)((int)local_e0 + 1) * 0x30;\n                    iVar38 = (int)local_e0 + 1;\n                  }\nLAB_004fe438:\n                  pvVar17 = (void *)sqlite3_malloc64(__n);\n                  if (pvVar17 == (void *)0x0) {\n                    iVar12 = 7;\n                  }\n                  else {\n                    pvVar17 = memset(pvVar17,0,__n);\n                    uStack_d0._0_4_ = iVar25;\n                    piStack_c0 = (int *)pvVar17;\n                    uStack_d0._4_4_ = local_1cc;\n                    piVar23 = (int *)plVar16[3];\n                    local_e8 = (long *)((ulong)local_e8 & 0xffffffff00000000);\n                    local_d8 = (undefined  [8])plVar16;\n                    iVar37 = *piVar23;\n                    local_c8._0_4_ = iVar38;\n                    local_b8 = CONCAT44(local_b8._4_4_,0xffffffff);\n                    if (iVar37 == 5) {\n                      uVar32 = 0;\n                    }\n                    else {\n                      do {\n                        iVar12 = fts3ExprIterate2(*(undefined8 *)(piVar23 + 4),&local_e8,\n                                                  fts3SnippetFindPositions);\n                        if (iVar12 != 0) goto LAB_004fe923;\n                        if (iVar37 == 2) goto LAB_004fe504;\n                        piVar23 = *(int **)(piVar23 + 6);\n                        iVar37 = *piVar23;\n                      } while (iVar37 != 5);\n                      uVar32 = (ulong)local_e8 & 0xffffffff;\n                    }\n                    iVar12 = fts3SnippetFindPositions(piVar23,uVar32,local_d8);\nLAB_004fe504:\n                    if (iVar12 == 0) {\n                      if (0 < iVar38) {\n                        plVar18 = (long *)((long)piStack_c0 + 0x18);\n                        iVar12 = 0;\n                        do {\n                          if (*plVar18 != 0) {\n                            local_1a0 = local_1a0 | 1L << ((byte)iVar12 & 0x3f);\n                          }\n                          iVar12 = iVar12 + 1;\n                          plVar18 = plVar18 + 6;\n                        } while (iVar12 != iVar38);\n                      }\n                      iVar12 = local_c8._0_4_;\n                      iVar38 = 0;\n                      iVar37 = -1;\n                      local_178 = 0;\n                      local_180 = 0;\n                      lVar36 = (long)piStack_c0;\n                      if ((int)local_b8 < 0) goto LAB_004fe7b2;\nLAB_004fe593:\n                      iVar7 = iVar38;\n                      if (0 < iVar12) {\nLAB_004fe5a2:\n                        plVar18 = (long *)(lVar36 + 0x10);\n                        iVar29 = 0x7fffffff;\n                        plVar2 = plVar18 + (long)iVar12 * 6;\n                        do {\n                          if ((plVar18[1] != 0) && (*plVar18 < (long)iVar29)) {\n                            iVar29 = (int)*plVar18;\n                          }\n                          plVar18 = plVar18 + 6;\n                        } while (plVar18 != plVar2);\n                        iVar38 = iVar7;\n                        if (iVar29 != 0x7fffffff) {\n                          lVar36 = lVar36 + 0x18;\n                          iVar38 = (iVar29 - uStack_d0._4_4_) + 1;\n                          lVar26 = (long)iVar12 * 0x30 + lVar36;\n                          local_b8 = CONCAT44(local_b8._4_4_,iVar38);\n                          do {\n                            fts3SnippetAdvance(lVar36,lVar36 + -8,iVar29 + 1);\n                            fts3SnippetAdvance(lVar36 + 0x10,lVar36 + 8,iVar38);\n                            lVar36 = lVar36 + 0x30;\n                          } while (lVar36 != lVar26);\n                          do {\n                            uVar33 = 0;\n                            iVar29 = 0;\n                            uVar32 = 0;\n                            uVar34 = 0;\n                            piVar23 = piStack_c0;\n                            do {\n                              while (pcVar31 = *(char **)(piVar23 + 10), pcVar31 == (char *)0x0) {\nLAB_004fe670:\n                                iVar29 = iVar29 + 1;\n                                piVar23 = piVar23 + 0xc;\n                                if (iVar29 == iVar12) goto LAB_004fe773;\n                              }\n                              iVar9 = uStack_d0._4_4_;\n                              lVar36 = *(long *)(piVar23 + 8);\n                              iVar1 = uStack_d0._4_4_ + iVar38;\n                              if ((iVar1 <= lVar36) || (lVar36 < iVar38)) goto LAB_004fe670;\n                              iVar4 = *piVar23;\n                              uVar27 = 1L << ((byte)iVar29 & 0x3f);\n                              bVar40 = 0 < uStack_d0._4_4_;\n                              while( true ) {\n                                uVar15 = (int)uVar33 + 1000;\n                                if (((local_210 | uVar34) & uVar27) != 0) {\n                                  uVar15 = (int)uVar33 + 1;\n                                }\n                                uVar33 = (ulong)uVar15;\n                                uVar34 = uVar34 | uVar27;\n                                if (0 < iVar4 && bVar40) {\n                                  iVar13 = iVar4;\n                                  if (iVar9 <= iVar4) {\n                                    iVar13 = iVar9;\n                                  }\n                                  iVar20 = 0;\n                                  do {\n                                    bVar19 = (byte)iVar20;\n                                    iVar20 = iVar20 + 1;\n                                    uVar32 = uVar32 | (ulong)(1L << ((char)lVar36 - (char)iVar38 &\n                                                                    0x3fU)) >> (bVar19 & 0x3f);\n                                  } while (iVar20 < iVar13);\n                                }\n                                cVar3 = *pcVar31;\n                                if (((int)cVar3 & 0xfeU) == 0) break;\n                                lVar26 = 1;\n                                uVar15 = (int)cVar3;\n                                if (cVar3 < '\\0') {\n                                  iVar13 = sqlite3Fts3GetVarint32(pcVar31,&local_e8);\n                                  lVar26 = (long)iVar13;\n                                  uVar15 = (uint)local_e8;\n                                }\n                                pcVar31 = pcVar31 + lVar26;\n                                lVar36 = lVar36 + (int)(uVar15 - 2);\n                                if ((iVar1 <= lVar36) || (lVar36 < iVar38)) break;\n                              }\n                              iVar29 = iVar29 + 1;\n                              piVar23 = piVar23 + 0xc;\n                            } while (iVar29 != iVar12);\nLAB_004fe773:\n                            lVar36 = (long)piStack_c0;\n                            if (iVar37 < (int)uVar33) {\n                              while( true ) {\n                                iVar37 = (int)uVar33;\n                                local_180 = uVar34;\n                                local_178 = uVar32;\n                                if (-1 < iVar38) goto LAB_004fe593;\nLAB_004fe7b2:\n                                local_b8 = local_b8 & 0xffffffff00000000;\n                                iVar7 = iVar38;\n                                if (0 < iVar12) break;\n                                if (-1 < iVar37) goto LAB_004fe8a8;\n                                iVar38 = 0;\n                                uVar33 = 0;\n                                uVar32 = 0;\n                                uVar34 = 0;\n                              }\n                            }\n                            else {\n                              if (-1 < iVar38) goto LAB_004fe5a2;\n                              local_b8 = local_b8 & 0xffffffff00000000;\n                            }\n                            uVar10 = uStack_d0._4_4_;\n                            lVar26 = 0;\n                            while( true ) {\n                              lVar36 = lVar36 + lVar26;\n                              lVar26 = lVar26 + 0x30;\n                              fts3SnippetAdvance(lVar36 + 0x18,lVar36 + 0x10,uVar10);\n                              if (lVar26 == (long)iVar12 * 0x30) break;\n                              lVar36 = (long)piStack_c0;\n                            }\n                            iVar38 = 0;\n                          } while( true );\n                        }\n                      }\nLAB_004fe8a8:\n                      sqlite3_free();\n                      if (local_148 < iVar37) {\n                        *(int *)(*pauVar22 + 4) = iVar38;\n                        *(int *)*pauVar22 = iVar25;\n                        *(ulong *)(*pauVar22 + 8) = local_180;\n                        *(ulong *)pauVar22[1] = local_178;\n                        local_148 = iVar37;\n                      }\n                      goto LAB_004fe358;\n                    }\nLAB_004fe923:\n                    sqlite3_free(piStack_c0);\n                  }\nLAB_004fe856:\n                  sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n                  *(undefined8 *)(lVar5 + 0x1e0) = 0;\n                  puVar30 = (undefined1 *)0x0;\n                  goto LAB_004fe87c;\n                }\nLAB_004fe358:\n                iVar25 = iVar25 + 1;\n              } while (iVar25 < *(int *)(lVar5 + 0x30));\n            }\n            puVar8 = *pauVar22;\n            pauVar22 = (undefined (*) [16])(pauVar22[1] + 8);\n            local_210 = local_210 | *(ulong *)(puVar8 + 8);\n          } while ((undefined (*) [16])(local_90 + lVar28 * 0x18) != pauVar22);\n          if (local_210 == local_1a0) goto LAB_004fe9ee;\n          lVar28 = lVar28 + 1;\n        } while (lVar28 != 4);\n        local_184 = 4;\n        iVar35 = 3;\nLAB_004fe9ee:\n        iVar39 = 0;\n        uVar32 = 1L << ((byte)(local_1cc + -1) & 0x3f);\n        do {\n          local_128 = 0;\n          iVar11 = *(int *)(*local_170 + 4);\n          uVar33 = *(ulong *)local_170[1];\n          lVar28 = *plVar16;\n          iVar14 = *(int *)*local_170 + 1;\n          lVar36 = sqlite3_column_text(plVar16[2],iVar14);\n          if (lVar36 == 0) {\n            iVar14 = sqlite3_column_type(plVar16[2],iVar14);\n            if (iVar14 != 5) {\n              iVar12 = 7;\n              goto LAB_004ff015;\n            }\n            iVar12 = 0;\n            bVar40 = true;\n          }\n          else {\n            iVar14 = sqlite3_column_bytes();\n            plVar18 = *(long **)(lVar28 + 0x48);\n            lVar26 = *plVar18;\n            iVar12 = sqlite3Fts3OpenTokenizer\n                               (plVar18,*(undefined4 *)(plVar16 + 4),lVar36,iVar14,&local_108);\n            uVar24 = local_108;\n            if (iVar12 != 0) {\nLAB_004ff015:\n              sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n              *(undefined8 *)(lVar5 + 0x1e0) = 0;\n              puVar30 = local_f8;\n              goto LAB_004fe87c;\n            }\n            iVar25 = 0;\n            bVar40 = false;\n            while( true ) {\n              local_124 = 0xffffffff;\n              local_120 = 0;\n              local_11c = 0;\n              iVar38 = (**(code **)(lVar26 + 0x28))\n                                 (uVar24,local_100,&local_124,&local_120,&local_11c,&local_128);\n              if (iVar38 != 0) break;\n              if (iVar11 <= local_128) {\n                if (bVar40) {\nLAB_004feb9f:\n                  if (iVar11 + local_1cc <= local_128) {\n                    iVar12 = iVar38;\n                    if (iVar39 == iVar35) {\n                      iVar12 = fts3StringAppend(&local_f8,local_1c8,0xffffffff);\n                    }\n                    goto LAB_004fec29;\n                  }\n                  bVar40 = (uVar33 >> ((ulong)(uint)(local_128 - iVar11) & 0x3f) & 1) != 0;\n                  if (iVar11 < local_128) {\n                    iVar12 = fts3StringAppend(&local_f8,iVar25 + lVar36,local_120 - iVar25);\n                    if (iVar12 != 0) goto LAB_004fec29;\n                    if (bVar40) goto LAB_004fed19;\nLAB_004fed33:\n                    if (iVar12 != 0) goto LAB_004fec29;\n                    iVar12 = fts3StringAppend(&local_f8,lVar36 + local_120,local_11c - local_120);\n                    if ((iVar12 == 0) && (bVar40)) {\n                      iVar12 = fts3StringAppend(&local_f8,local_1a8,0xffffffff);\n                    }\n                  }\n                  else {\n                    if (bVar40) {\nLAB_004fed19:\n                      iVar12 = fts3StringAppend(&local_f8,local_190,0xffffffff);\n                      goto LAB_004fed33;\n                    }\n                    iVar12 = fts3StringAppend(&local_f8,lVar36 + local_120,local_11c - local_120);\n                  }\n                  iVar25 = local_11c;\n                  if (iVar12 != 0) goto LAB_004fec29;\n                }\n                else {\n                  if (uVar33 != 0) {\n                    uVar34 = 0;\n                    iVar37 = 0;\n                    if ((uVar33 & 1) == 0) {\n                      do {\n                        uVar15 = (int)uVar34 + 1;\n                        uVar34 = (ulong)uVar15;\n                      } while ((uVar33 >> (uVar34 & 0x3f) & 1) == 0);\n                      uVar27 = uVar32 & uVar33;\n                      while (uVar27 == 0) {\nLAB_004fede2:\n                        uVar15 = (uint)uVar34;\n                        iVar37 = iVar37 + 1;\n                        uVar27 = uVar33 >> ((ulong)(uint)((local_1cc + -1) - iVar37) & 0x3f) & 1;\n                      }\n                      if (1 < (int)(uVar15 - iVar37)) {\n                        local_118 = 0;\n                        plVar18 = *(long **)(lVar28 + 0x48);\n                        lVar6 = *plVar18;\n                        iVar12 = sqlite3Fts3OpenTokenizer\n                                           (plVar18,*(undefined4 *)(plVar16 + 4),local_120 + lVar36,\n                                            iVar14 - local_120,&local_e8);\n                        plVar18 = local_e8;\n                        if (iVar12 != 0) goto LAB_004fec29;\n                        do {\n                          if (((int)(uVar15 - iVar37) >> 1) + local_1cc <= local_118) {\n                            iVar12 = 0;\n                            (**(code **)(lVar6 + 0x20))(plVar18);\n                            goto LAB_004fefa0;\n                          }\n                          local_114 = 0;\n                          local_110 = 0;\n                          local_10c = 0;\n                          iVar12 = (**(code **)(lVar6 + 0x28))\n                                             (plVar18,local_d8,&local_114,&local_110,&local_10c);\n                        } while (iVar12 == 0);\n                        (**(code **)(lVar6 + 0x20))(plVar18);\n                        if (iVar12 != 0x65) goto LAB_004fec29;\nLAB_004fefa0:\n                        iVar12 = (local_118 - local_1cc) + (uint)(iVar12 == 0x65);\n                        if (0 < iVar12) {\n                          iVar11 = iVar11 + iVar12;\n                          uVar33 = uVar33 >> ((byte)iVar12 & 0x3f);\n                        }\n                      }\n                    }\n                    else if ((uVar32 & uVar33) == 0) goto LAB_004fede2;\n                  }\n                  if ((iVar39 < 1) && (iVar11 < 1)) {\n                    if (local_120 != 0) {\n                      iVar12 = fts3StringAppend(&local_f8,lVar36);\n                      goto LAB_004fef46;\n                    }\n                  }\n                  else {\n                    iVar12 = fts3StringAppend(&local_f8,local_1c8,0xffffffff);\nLAB_004fef46:\n                    if (iVar12 != 0) goto LAB_004fec29;\n                  }\n                  if (iVar11 <= local_128) goto LAB_004feb9f;\n                }\n                bVar40 = true;\n              }\n            }\n            iVar12 = iVar38;\n            if (iVar38 == 0x65) {\n              iVar12 = fts3StringAppend(&local_f8,lVar36 + iVar25,0xffffffff);\n            }\nLAB_004fec29:\n            (**(code **)(lVar26 + 0x20))(uVar24);\n            bVar40 = iVar12 == 0;\n          }\n          iVar39 = iVar39 + 1;\n          local_170 = (undefined (*) [16])(local_170[1] + 8);\n        } while ((iVar39 < local_184) && (bVar40));\n        sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n        *(undefined8 *)(lVar5 + 0x1e0) = 0;\n        puVar30 = local_f8;\n        if (iVar12 == 0) {\n          if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n            pcVar21 = sqlite3_free;\n            uVar24 = 0xffffffff;\n            goto LAB_004fe09f;\n          }\n        }\n        else {\nLAB_004fe87c:\n          sqlite3_result_error_code(param_1,iVar12);\n          if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\nLAB_004fe20d:\n            sqlite3_free(puVar30);\n            return;\n          }\n        }\n      }\n    }\n    else if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return;\n    }\n  }\nLAB_004fe89e:\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid sub004fdf70(undefined8 param_1,int param_2,undefined8 *param_3)\n\n{\n  int iVar1;\n  long *plVar2;\n  char cVar3;\n  int iVar4;\n  long lVar5;\n  long lVar6;\n  int iVar7;\n  undefined *puVar8;\n  int iVar9;\n  undefined4 uVar10;\n  int iVar11;\n  int iVar12;\n  int iVar13;\n  int iVar14;\n  uint uVar15;\n  long *plVar16;\n  void *pvVar17;\n  long *plVar18;\n  byte bVar19;\n  int iVar20;\n  code *pcVar21;\n  undefined (*pauVar22) [16];\n  int *piVar23;\n  undefined8 uVar24;\n  int iVar25;\n  long lVar26;\n  ulong uVar27;\n  long lVar28;\n  int iVar29;\n  undefined1 *puVar30;\n  char *pcVar31;\n  ulong uVar32;\n  ulong uVar33;\n  ulong uVar34;\n  size_t __n;\n  int iVar35;\n  long lVar36;\n  int iVar37;\n  int iVar38;\n  int iVar39;\n  long in_FS_OFFSET;\n  bool bVar40;\n  ulong local_210;\n  int local_1cc;\n  undefined *local_1c8;\n  undefined *local_1a8;\n  ulong local_1a0;\n  undefined *local_190;\n  int local_184;\n  ulong local_180;\n  ulong local_178;\n  undefined (*local_170) [16];\n  int local_148;\n  int local_128;\n  undefined4 local_124;\n  int local_120;\n  int local_11c;\n  int local_118;\n  undefined4 local_114;\n  undefined4 local_110;\n  undefined4 local_10c;\n  undefined8 local_108;\n  undefined4 local_100 [2];\n  undefined1 *local_f8;\n  undefined8 local_f0;\n  long *local_e8;\n  undefined8 local_e0;\n  undefined local_d8 [8];\n  undefined8 uStack_d0;\n  undefined local_c8 [8];\n  int *piStack_c0;\n  undefined8 local_b8;\n  undefined local_a8 [24];\n  undefined local_90 [80];\n  long local_40;\n  \n  local_40 = *(long *)(in_FS_OFFSET + 0x28);\n  if (6 < param_2) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      sqlite3_result_error(param_1,\"wrong number of arguments to function snippet()\",0xffffffff);\n      return;\n    }\n    goto LAB_004fe89e;\n  }\n  plVar16 = (long *)sqlite3_value_pointer(*param_3,\"fts3cursor\");\n  if (plVar16 == (long *)0x0) {\n    puVar30 = (undefined1 *)sqlite3_mprintf(\"illegal first argument to %s\",\"snippet\");\n    sqlite3_result_error(param_1,puVar30,0xffffffff);\n    if (local_40 != *(long *)(in_FS_OFFSET + 0x28)) goto LAB_004fe89e;\n    goto LAB_004fe20d;\n  }\n  switch(param_2) {\n  default:\n    iVar14 = -1;\n    iVar39 = 0xf;\n    local_190 = &DAT_0052596e;\n    local_1c8 = &DAT_00525963;\n    local_1a8 = &DAT_00525969;\n    goto LAB_004fe190;\n  case 2:\n    iVar14 = -1;\n    bVar40 = false;\n    iVar39 = 0xf;\n    local_1c8 = &DAT_00525963;\n    local_1a8 = &DAT_00525969;\n    goto LAB_004fe04f;\n  case 3:\n    bVar40 = false;\n    iVar14 = -1;\n    iVar39 = 0xf;\n    local_1c8 = &DAT_00525963;\n    goto LAB_004fe038;\n  case 4:\n    iVar14 = -1;\n    iVar39 = 0xf;\n    goto LAB_004fe023;\n  case 5:\n    iVar39 = 0xf;\n    break;\n  case 6:\n    iVar39 = sqlite3_value_int(param_3[5]);\n  }\n  iVar14 = sqlite3_value_int(param_3[4]);\nLAB_004fe023:\n  local_1c8 = (undefined *)sqlite3_value_text(param_3[3]);\n  bVar40 = local_1c8 == (undefined *)0x0;\nLAB_004fe038:\n  local_1a8 = (undefined *)sqlite3_value_text(param_3[2]);\n  bVar40 = (bool)(local_1a8 == (undefined *)0x0 | bVar40);\nLAB_004fe04f:\n  local_190 = (undefined *)sqlite3_value_text(param_3[1]);\n  if ((local_190 == (undefined *)0x0) || (bVar40)) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      sqlite3_result_error_nomem(param_1);\n      return;\n    }\n  }\n  else if (iVar39 == 0) {\n    if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      pcVar21 = (code *)0x0;\n      uVar24 = 0xffffffff;\n      puVar30 = &DAT_00517c73;\n      goto LAB_004fe09f;\n    }\n  }\n  else {\nLAB_004fe190:\n    iVar11 = fts3CursorSeek(param_1,plVar16);\n    if (iVar11 == 0) {\n      local_f8 = (undefined1 *)0x0;\n      local_f0 = 0;\n      lVar5 = *plVar16;\n      if (plVar16[3] == 0) {\n        if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n          pcVar21 = (code *)0x0;\n          uVar24 = 0;\n          puVar30 = &DAT_00517c73;\nLAB_004fe09f:\n          sqlite3_result_text(param_1,puVar30,uVar24,pcVar21);\n          return;\n        }\n      }\n      else {\n        local_170 = (undefined (*) [16])local_a8;\n        iVar11 = 0x40;\n        if (iVar39 < 0x41) {\n          iVar11 = iVar39;\n        }\n        if (iVar11 < -0x40) {\n          iVar11 = -0x40;\n        }\n        lVar28 = 0;\n        do {\n          iVar35 = (int)lVar28;\n          local_184 = iVar35 + 1;\n          local_1cc = -iVar11;\n          if (-1 < iVar39) {\n            local_1cc = (iVar11 + iVar35) / local_184;\n          }\n          local_1a0 = 0;\n          local_210 = 0;\n          pauVar22 = local_170;\n          do {\n            *(undefined8 *)pauVar22[1] = 0;\n            *pauVar22 = (undefined  [16])0x0;\n            if (0 < *(int *)(lVar5 + 0x30)) {\n              iVar25 = 0;\n              local_148 = -1;\n              do {\n                if ((iVar14 == iVar25) || (iVar14 < 0)) {\n                  local_b8 = 0;\n                  _local_d8 = (undefined  [16])0x0;\n                  _local_c8 = (undefined  [16])0x0;\n                  piVar23 = (int *)plVar16[3];\n                  local_e0 = 0;\n                  local_100[0] = 0;\n                  iVar38 = *piVar23;\n                  local_e8 = plVar16;\n                  if (iVar38 == 5) {\n                    __n = 0x30;\n                    iVar38 = 1;\n                  }\n                  else {\n                    do {\n                      iVar12 = fts3ExprIterate2(*(undefined8 *)(piVar23 + 4),local_100,\n                                                fts3ExprLoadDoclistsCb);\n                      if ((iVar12 != 0) || (iVar38 == 2)) {\n                        if (iVar12 != 0) goto LAB_004fe856;\n                        __n = (long)(int)local_e0 * 0x30;\n                        iVar38 = (int)local_e0;\n                        goto LAB_004fe438;\n                      }\n                      piVar23 = *(int **)(piVar23 + 6);\n                      iVar38 = *piVar23;\n                    } while (iVar38 != 5);\n                    __n = (long)((int)local_e0 + 1) * 0x30;\n                    iVar38 = (int)local_e0 + 1;\n                  }\nLAB_004fe438:\n                  pvVar17 = (void *)sqlite3_malloc64(__n);\n                  if (pvVar17 == (void *)0x0) {\n                    iVar12 = 7;\n                  }\n                  else {\n                    pvVar17 = memset(pvVar17,0,__n);\n                    uStack_d0._0_4_ = iVar25;\n                    piStack_c0 = (int *)pvVar17;\n                    uStack_d0._4_4_ = local_1cc;\n                    piVar23 = (int *)plVar16[3];\n                    local_e8 = (long *)((ulong)local_e8 & 0xffffffff00000000);\n                    local_d8 = (undefined  [8])plVar16;\n                    iVar37 = *piVar23;\n                    local_c8._0_4_ = iVar38;\n                    local_b8 = CONCAT44(local_b8._4_4_,0xffffffff);\n                    if (iVar37 == 5) {\n                      uVar32 = 0;\n                    }\n                    else {\n                      do {\n                        iVar12 = fts3ExprIterate2(*(undefined8 *)(piVar23 + 4),&local_e8,\n                                                  fts3SnippetFindPositions);\n                        if (iVar12 != 0) goto LAB_004fe923;\n                        if (iVar37 == 2) goto LAB_004fe504;\n                        piVar23 = *(int **)(piVar23 + 6);\n                        iVar37 = *piVar23;\n                      } while (iVar37 != 5);\n                      uVar32 = (ulong)local_e8 & 0xffffffff;\n                    }\n                    iVar12 = fts3SnippetFindPositions(piVar23,uVar32,local_d8);\nLAB_004fe504:\n                    if (iVar12 == 0) {\n                      if (0 < iVar38) {\n                        plVar18 = (long *)((long)piStack_c0 + 0x18);\n                        iVar12 = 0;\n                        do {\n                          if (*plVar18 != 0) {\n                            local_1a0 = local_1a0 | 1L << ((byte)iVar12 & 0x3f);\n                          }\n                          iVar12 = iVar12 + 1;\n                          plVar18 = plVar18 + 6;\n                        } while (iVar12 != iVar38);\n                      }\n                      iVar12 = local_c8._0_4_;\n                      iVar38 = 0;\n                      iVar37 = -1;\n                      local_178 = 0;\n                      local_180 = 0;\n                      lVar36 = (long)piStack_c0;\n                      if ((int)local_b8 < 0) goto LAB_004fe7b2;\nLAB_004fe593:\n                      iVar7 = iVar38;\n                      if (0 < iVar12) {\nLAB_004fe5a2:\n                        plVar18 = (long *)(lVar36 + 0x10);\n                        iVar29 = 0x7fffffff;\n                        plVar2 = plVar18 + (long)iVar12 * 6;\n                        do {\n                          if ((plVar18[1] != 0) && (*plVar18 < (long)iVar29)) {\n                            iVar29 = (int)*plVar18;\n                          }\n                          plVar18 = plVar18 + 6;\n                        } while (plVar18 != plVar2);\n                        iVar38 = iVar7;\n                        if (iVar29 != 0x7fffffff) {\n                          lVar36 = lVar36 + 0x18;\n                          iVar38 = (iVar29 - uStack_d0._4_4_) + 1;\n                          lVar26 = (long)iVar12 * 0x30 + lVar36;\n                          local_b8 = CONCAT44(local_b8._4_4_,iVar38);\n                          do {\n                            fts3SnippetAdvance(lVar36,lVar36 + -8,iVar29 + 1);\n                            fts3SnippetAdvance(lVar36 + 0x10,lVar36 + 8,iVar38);\n                            lVar36 = lVar36 + 0x30;\n                          } while (lVar36 != lVar26);\n                          do {\n                            uVar33 = 0;\n                            iVar29 = 0;\n                            uVar32 = 0;\n                            uVar34 = 0;\n                            piVar23 = piStack_c0;\n                            do {\n                              while (pcVar31 = *(char **)(piVar23 + 10), pcVar31 == (char *)0x0) {\nLAB_004fe670:\n                                iVar29 = iVar29 + 1;\n                                piVar23 = piVar23 + 0xc;\n                                if (iVar29 == iVar12) goto LAB_004fe773;\n                              }\n                              iVar9 = uStack_d0._4_4_;\n                              lVar36 = *(long *)(piVar23 + 8);\n                              iVar1 = uStack_d0._4_4_ + iVar38;\n                              if ((iVar1 <= lVar36) || (lVar36 < iVar38)) goto LAB_004fe670;\n                              iVar4 = *piVar23;\n                              uVar27 = 1L << ((byte)iVar29 & 0x3f);\n                              bVar40 = 0 < uStack_d0._4_4_;\n                              while( true ) {\n                                uVar15 = (int)uVar33 + 1000;\n                                if (((local_210 | uVar34) & uVar27) != 0) {\n                                  uVar15 = (int)uVar33 + 1;\n                                }\n                                uVar33 = (ulong)uVar15;\n                                uVar34 = uVar34 | uVar27;\n                                if (0 < iVar4 && bVar40) {\n                                  iVar13 = iVar4;\n                                  if (iVar9 <= iVar4) {\n                                    iVar13 = iVar9;\n                                  }\n                                  iVar20 = 0;\n                                  do {\n                                    bVar19 = (byte)iVar20;\n                                    iVar20 = iVar20 + 1;\n                                    uVar32 = uVar32 | (ulong)(1L << ((char)lVar36 - (char)iVar38 &\n                                                                    0x3fU)) >> (bVar19 & 0x3f);\n                                  } while (iVar20 < iVar13);\n                                }\n                                cVar3 = *pcVar31;\n                                if (((int)cVar3 & 0xfeU) == 0) break;\n                                lVar26 = 1;\n                                uVar15 = (int)cVar3;\n                                if (cVar3 < '\\0') {\n                                  iVar13 = sqlite3Fts3GetVarint32(pcVar31,&local_e8);\n                                  lVar26 = (long)iVar13;\n                                  uVar15 = (uint)local_e8;\n                                }\n                                pcVar31 = pcVar31 + lVar26;\n                                lVar36 = lVar36 + (int)(uVar15 - 2);\n                                if ((iVar1 <= lVar36) || (lVar36 < iVar38)) break;\n                              }\n                              iVar29 = iVar29 + 1;\n                              piVar23 = piVar23 + 0xc;\n                            } while (iVar29 != iVar12);\nLAB_004fe773:\n                            lVar36 = (long)piStack_c0;\n                            if (iVar37 < (int)uVar33) {\n                              while( true ) {\n                                iVar37 = (int)uVar33;\n                                local_180 = uVar34;\n                                local_178 = uVar32;\n                                if (-1 < iVar38) goto LAB_004fe593;\nLAB_004fe7b2:\n                                local_b8 = local_b8 & 0xffffffff00000000;\n                                iVar7 = iVar38;\n                                if (0 < iVar12) break;\n                                if (-1 < iVar37) goto LAB_004fe8a8;\n                                iVar38 = 0;\n                                uVar33 = 0;\n                                uVar32 = 0;\n                                uVar34 = 0;\n                              }\n                            }\n                            else {\n                              if (-1 < iVar38) goto LAB_004fe5a2;\n                              local_b8 = local_b8 & 0xffffffff00000000;\n                            }\n                            uVar10 = uStack_d0._4_4_;\n                            lVar26 = 0;\n                            while( true ) {\n                              lVar36 = lVar36 + lVar26;\n                              lVar26 = lVar26 + 0x30;\n                              fts3SnippetAdvance(lVar36 + 0x18,lVar36 + 0x10,uVar10);\n                              if (lVar26 == (long)iVar12 * 0x30) break;\n                              lVar36 = (long)piStack_c0;\n                            }\n                            iVar38 = 0;\n                          } while( true );\n                        }\n                      }\nLAB_004fe8a8:\n                      sqlite3_free();\n                      if (local_148 < iVar37) {\n                        *(int *)(*pauVar22 + 4) = iVar38;\n                        *(int *)*pauVar22 = iVar25;\n                        *(ulong *)(*pauVar22 + 8) = local_180;\n                        *(ulong *)pauVar22[1] = local_178;\n                        local_148 = iVar37;\n                      }\n                      goto LAB_004fe358;\n                    }\nLAB_004fe923:\n                    sqlite3_free(piStack_c0);\n                  }\nLAB_004fe856:\n                  sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n                  *(undefined8 *)(lVar5 + 0x1e0) = 0;\n                  puVar30 = (undefined1 *)0x0;\n                  goto LAB_004fe87c;\n                }\nLAB_004fe358:\n                iVar25 = iVar25 + 1;\n              } while (iVar25 < *(int *)(lVar5 + 0x30));\n            }\n            puVar8 = *pauVar22;\n            pauVar22 = (undefined (*) [16])(pauVar22[1] + 8);\n            local_210 = local_210 | *(ulong *)(puVar8 + 8);\n          } while ((undefined (*) [16])(local_90 + lVar28 * 0x18) != pauVar22);\n          if (local_210 == local_1a0) goto LAB_004fe9ee;\n          lVar28 = lVar28 + 1;\n        } while (lVar28 != 4);\n        local_184 = 4;\n        iVar35 = 3;\nLAB_004fe9ee:\n        iVar39 = 0;\n        uVar32 = 1L << ((byte)(local_1cc + -1) & 0x3f);\n        do {\n          local_128 = 0;\n          iVar11 = *(int *)(*local_170 + 4);\n          uVar33 = *(ulong *)local_170[1];\n          lVar28 = *plVar16;\n          iVar14 = *(int *)*local_170 + 1;\n          lVar36 = sqlite3_column_text(plVar16[2],iVar14);\n          if (lVar36 == 0) {\n            iVar14 = sqlite3_column_type(plVar16[2],iVar14);\n            if (iVar14 != 5) {\n              iVar12 = 7;\n              goto LAB_004ff015;\n            }\n            iVar12 = 0;\n            bVar40 = true;\n          }\n          else {\n            iVar14 = sqlite3_column_bytes();\n            plVar18 = *(long **)(lVar28 + 0x48);\n            lVar26 = *plVar18;\n            iVar12 = sqlite3Fts3OpenTokenizer\n                               (plVar18,*(undefined4 *)(plVar16 + 4),lVar36,iVar14,&local_108);\n            uVar24 = local_108;\n            if (iVar12 != 0) {\nLAB_004ff015:\n              sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n              *(undefined8 *)(lVar5 + 0x1e0) = 0;\n              puVar30 = local_f8;\n              goto LAB_004fe87c;\n            }\n            iVar25 = 0;\n            bVar40 = false;\n            while( true ) {\n              local_124 = 0xffffffff;\n              local_120 = 0;\n              local_11c = 0;\n              iVar38 = (**(code **)(lVar26 + 0x28))\n                                 (uVar24,local_100,&local_124,&local_120,&local_11c,&local_128);\n              if (iVar38 != 0) break;\n              if (iVar11 <= local_128) {\n                if (bVar40) {\nLAB_004feb9f:\n                  if (iVar11 + local_1cc <= local_128) {\n                    iVar12 = iVar38;\n                    if (iVar39 == iVar35) {\n                      iVar12 = fts3StringAppend(&local_f8,local_1c8,0xffffffff);\n                    }\n                    goto LAB_004fec29;\n                  }\n                  bVar40 = (uVar33 >> ((ulong)(uint)(local_128 - iVar11) & 0x3f) & 1) != 0;\n                  if (iVar11 < local_128) {\n                    iVar12 = fts3StringAppend(&local_f8,iVar25 + lVar36,local_120 - iVar25);\n                    if (iVar12 != 0) goto LAB_004fec29;\n                    if (bVar40) goto LAB_004fed19;\nLAB_004fed33:\n                    if (iVar12 != 0) goto LAB_004fec29;\n                    iVar12 = fts3StringAppend(&local_f8,lVar36 + local_120,local_11c - local_120);\n                    if ((iVar12 == 0) && (bVar40)) {\n                      iVar12 = fts3StringAppend(&local_f8,local_1a8,0xffffffff);\n                    }\n                  }\n                  else {\n                    if (bVar40) {\nLAB_004fed19:\n                      iVar12 = fts3StringAppend(&local_f8,local_190,0xffffffff);\n                      goto LAB_004fed33;\n                    }\n                    iVar12 = fts3StringAppend(&local_f8,lVar36 + local_120,local_11c - local_120);\n                  }\n                  iVar25 = local_11c;\n                  if (iVar12 != 0) goto LAB_004fec29;\n                }\n                else {\n                  if (uVar33 != 0) {\n                    uVar34 = 0;\n                    iVar37 = 0;\n                    if ((uVar33 & 1) == 0) {\n                      do {\n                        uVar15 = (int)uVar34 + 1;\n                        uVar34 = (ulong)uVar15;\n                      } while ((uVar33 >> (uVar34 & 0x3f) & 1) == 0);\n                      uVar27 = uVar32 & uVar33;\n                      while (uVar27 == 0) {\nLAB_004fede2:\n                        uVar15 = (uint)uVar34;\n                        iVar37 = iVar37 + 1;\n                        uVar27 = uVar33 >> ((ulong)(uint)((local_1cc + -1) - iVar37) & 0x3f) & 1;\n                      }\n                      if (1 < (int)(uVar15 - iVar37)) {\n                        local_118 = 0;\n                        plVar18 = *(long **)(lVar28 + 0x48);\n                        lVar6 = *plVar18;\n                        iVar12 = sqlite3Fts3OpenTokenizer\n                                           (plVar18,*(undefined4 *)(plVar16 + 4),local_120 + lVar36,\n                                            iVar14 - local_120,&local_e8);\n                        plVar18 = local_e8;\n                        if (iVar12 != 0) goto LAB_004fec29;\n                        do {\n                          if (((int)(uVar15 - iVar37) >> 1) + local_1cc <= local_118) {\n                            iVar12 = 0;\n                            (**(code **)(lVar6 + 0x20))(plVar18);\n                            goto LAB_004fefa0;\n                          }\n                          local_114 = 0;\n                          local_110 = 0;\n                          local_10c = 0;\n                          iVar12 = (**(code **)(lVar6 + 0x28))\n                                             (plVar18,local_d8,&local_114,&local_110,&local_10c);\n                        } while (iVar12 == 0);\n                        (**(code **)(lVar6 + 0x20))(plVar18);\n                        if (iVar12 != 0x65) goto LAB_004fec29;\nLAB_004fefa0:\n                        iVar12 = (local_118 - local_1cc) + (uint)(iVar12 == 0x65);\n                        if (0 < iVar12) {\n                          iVar11 = iVar11 + iVar12;\n                          uVar33 = uVar33 >> ((byte)iVar12 & 0x3f);\n                        }\n                      }\n                    }\n                    else if ((uVar32 & uVar33) == 0) goto LAB_004fede2;\n                  }\n                  if ((iVar39 < 1) && (iVar11 < 1)) {\n                    if (local_120 != 0) {\n                      iVar12 = fts3StringAppend(&local_f8,lVar36);\n                      goto LAB_004fef46;\n                    }\n                  }\n                  else {\n                    iVar12 = fts3StringAppend(&local_f8,local_1c8,0xffffffff);\nLAB_004fef46:\n                    if (iVar12 != 0) goto LAB_004fec29;\n                  }\n                  if (iVar11 <= local_128) goto LAB_004feb9f;\n                }\n                bVar40 = true;\n              }\n            }\n            iVar12 = iVar38;\n            if (iVar38 == 0x65) {\n              iVar12 = fts3StringAppend(&local_f8,lVar36 + iVar25,0xffffffff);\n            }\nLAB_004fec29:\n            (**(code **)(lVar26 + 0x20))(uVar24);\n            bVar40 = iVar12 == 0;\n          }\n          iVar39 = iVar39 + 1;\n          local_170 = (undefined (*) [16])(local_170[1] + 8);\n        } while ((iVar39 < local_184) && (bVar40));\n        sqlite3_blob_close(*(undefined8 *)(lVar5 + 0x1e0));\n        *(undefined8 *)(lVar5 + 0x1e0) = 0;\n        puVar30 = local_f8;\n        if (iVar12 == 0) {\n          if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n            pcVar21 = sqlite3_free;\n            uVar24 = 0xffffffff;\n            goto LAB_004fe09f;\n          }\n        }\n        else {\nLAB_004fe87c:\n          sqlite3_result_error_code(param_1,iVar12);\n          if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\nLAB_004fe20d:\n            sqlite3_free(puVar30);\n            return;\n          }\n        }\n      }\n    }\n    else if (local_40 == *(long *)(in_FS_OFFSET + 0x28)) {\n      return;\n    }\n  }\nLAB_004fe89e:\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n\n\nSymbols:\nplVar18,\npvVar17,\niVar20,\nbVar19,\niVar14,\niVar13,\nplVar16,\nuVar15,\nlVar26,\niVar25,\nlVar28,\nuVar27,\npauVar22,\npcVar21,\nuVar24,\npiVar23,\nuVar34,\nuVar33,\niVar35,\n__n,\npuVar30,\niVar29,\nuVar32,\npcVar31,\nbVar40,\nin_FS_OFFSET,\niVar37,\nlVar36,\niVar39,\niVar38,\nlocal_210,\nlocal_1cc,\nlocal_1c8,\nparam_2,\nparam_1,\nlocal_1a8,\nlocal_1a0,\nparam_3,\nlocal_190,\nlocal_184,\nlocal_180,\nlocal_178,\nlocal_170,\nlocal_148,\nlocal_128,\nuStack_d0,\nlocal_124,\nlocal_120,\npiStack_c0,\nlocal_11c,\nlocal_118,\nlocal_114,\nlocal_110,\nlocal_10c,\nlocal_108,\nplVar2,\niVar1,\nlocal_100,\niVar4,\nlocal_f8,\ncVar3,\nlocal_f0,\nlocal_e8,\nlocal_e0,\nlocal_d8,\nlocal_c8,\nlocal_b8,\nuVar10,\niVar9,\nlocal_a8,\niVar12,\niVar11,\nlocal_90,\nlVar6,\nlocal_40,\nlVar5,\npuVar8,\niVar7\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "nth_valueStepFunc", "obscured": "sub0047fbf0"}, "symbols": ["dVar5", "iVar2", "lVar1", "lVar4", "plVar3", "param_1", "param_3", "param_2"]}, "decompiled_content": "\nvoid sub0047fbf0(undefined8 param_1,undefined8 param_2,undefined8 *param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  long *plVar3;\n  long lVar4;\n  double dVar5;\n  \n  plVar3 = (long *)sqlite3_aggregate_context(param_1,0x10);\n  if (plVar3 != (long *)0x0) {\n    iVar2 = sqlite3_value_numeric_type(param_3[1]);\n    if (iVar2 == 1) {\n      lVar4 = sqlite3_value_int64(param_3[1]);\n    }\n    else {\n      if (iVar2 != 2) goto LAB_0047fc60;\n      dVar5 = (double)sqlite3_value_double(param_3[1]);\n      lVar4 = (long)dVar5;\n      if ((double)lVar4 != dVar5) goto LAB_0047fc60;\n    }\n    if (lVar4 < 1) {\nLAB_0047fc60:\n      sqlite3_result_error\n                (param_1,\"second argument to nth_value must be a positive integer\",0xffffffff);\n      return;\n    }\n    lVar1 = *plVar3;\n    *plVar3 = lVar1 + 1;\n    if (lVar1 + 1 == lVar4) {\n      lVar4 = sqlite3_value_dup(*param_3);\n      plVar3[1] = lVar4;\n      if (lVar4 == 0) {\n        sqlite3_result_error_nomem(param_1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid sub0047fbf0(undefined8 param_1,undefined8 param_2,undefined8 *param_3)\n\n{\n  long lVar1;\n  int iVar2;\n  long *plVar3;\n  long lVar4;\n  double dVar5;\n  \n  plVar3 = (long *)sqlite3_aggregate_context(param_1,0x10);\n  if (plVar3 != (long *)0x0) {\n    iVar2 = sqlite3_value_numeric_type(param_3[1]);\n    if (iVar2 == 1) {\n      lVar4 = sqlite3_value_int64(param_3[1]);\n    }\n    else {\n      if (iVar2 != 2) goto LAB_0047fc60;\n      dVar5 = (double)sqlite3_value_double(param_3[1]);\n      lVar4 = (long)dVar5;\n      if ((double)lVar4 != dVar5) goto LAB_0047fc60;\n    }\n    if (lVar4 < 1) {\nLAB_0047fc60:\n      sqlite3_result_error\n                (param_1,\"second argument to nth_value must be a positive integer\",0xffffffff);\n      return;\n    }\n    lVar1 = *plVar3;\n    *plVar3 = lVar1 + 1;\n    if (lVar1 + 1 == lVar4) {\n      lVar4 = sqlite3_value_dup(*param_3);\n      plVar3[1] = lVar4;\n      if (lVar4 == 0) {\n        sqlite3_result_error_nomem(param_1);\n        return;\n      }\n    }\n  }\n  return;\n}\n\n\n\nSymbols:\ndVar5,\niVar2,\nlVar1,\nlVar4,\nplVar3,\nparam_1,\nparam_3,\nparam_2\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "sqlite3MemTraceDeactivate", "obscured": "sub0041cf90"}, "symbols": ["uVar1"]}, "decompiled_content": "\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 sub0041cf90(void)\n\n{\n  undefined8 uVar1;\n  \n  if (CONCAT44(memtraceBase._4_4_,(undefined4)memtraceBase) == 0) {\n    memtraceOut = 0;\n    return 0;\n  }\n  uVar1 = sqlite3_config(4,&memtraceBase);\n  if ((int)uVar1 != 0) {\n    memtraceOut = 0;\n    return uVar1;\n  }\n  memtraceOut = 0;\n  memtraceBase._0_4_ = 0;\n  memtraceBase._4_4_ = 0;\n  _DAT_00562a28 = 0;\n  uRam0000000000562a2c = 0;\n  _DAT_00562a30 = 0;\n  uRam0000000000562a34 = 0;\n  _DAT_00562a38 = 0;\n  uRam0000000000562a3c = 0;\n  _DAT_00562a40 = 0;\n  uRam0000000000562a44 = 0;\n  _DAT_00562a48 = 0;\n  uRam0000000000562a4c = 0;\n  _DAT_00562a50 = 0;\n  uRam0000000000562a54 = 0;\n  uRam0000000000562a58 = 0;\n  uRam0000000000562a5c = 0;\n  return uVar1;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\n/* WARNING: Globals starting with '_' overlap smaller symbols at the same address */\n\nundefined8 sub0041cf90(void)\n\n{\n  undefined8 uVar1;\n  \n  if (CONCAT44(memtraceBase._4_4_,(undefined4)memtraceBase) == 0) {\n    memtraceOut = 0;\n    return 0;\n  }\n  uVar1 = sqlite3_config(4,&memtraceBase);\n  if ((int)uVar1 != 0) {\n    memtraceOut = 0;\n    return uVar1;\n  }\n  memtraceOut = 0;\n  memtraceBase._0_4_ = 0;\n  memtraceBase._4_4_ = 0;\n  _DAT_00562a28 = 0;\n  uRam0000000000562a2c = 0;\n  _DAT_00562a30 = 0;\n  uRam0000000000562a34 = 0;\n  _DAT_00562a38 = 0;\n  uRam0000000000562a3c = 0;\n  _DAT_00562a40 = 0;\n  uRam0000000000562a44 = 0;\n  _DAT_00562a48 = 0;\n  uRam0000000000562a4c = 0;\n  _DAT_00562a50 = 0;\n  uRam0000000000562a54 = 0;\n  uRam0000000000562a58 = 0;\n  uRam0000000000562a5c = 0;\n  return uVar1;\n}\n\n\n\nSymbols:\nuVar1\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "sqlite3_wal_checkpoint", "obscured": "sub004e0420"}, "symbols": ["param_2", "param_1"]}, "decompiled_content": "\nvoid sub004e0420(undefined8 param_1,undefined8 param_2)\n\n{\n  sub004e0420_v2(param_1,param_2,0,0,0);\n  return;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid sub004e0420(undefined8 param_1,undefined8 param_2)\n\n{\n  sub004e0420_v2(param_1,param_2,0,0,0);\n  return;\n}\n\n\n\nSymbols:\nparam_2,\nparam_1\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "computeYMD_HMS", "obscured": "sub0043ccf0"}, "symbols": ["iVar2", "iVar1", "param_1"]}, "decompiled_content": "\nvoid sub0043ccf0(long *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (*(char *)((long)param_1 + 0x29) == '\\0') {\n    computeYMD_part_0();\n  }\n  if (*(char *)((long)param_1 + 0x2a) == '\\0') {\n    if (*(char *)(param_1 + 5) == '\\0') {\n      computeJD_part_0(param_1);\n    }\n    *(byte *)((long)param_1 + 0x2c) = *(byte *)((long)param_1 + 0x2c) & 0xfe;\n    *(undefined *)((long)param_1 + 0x2a) = 1;\n    iVar2 = (int)(*param_1 + 43200000) + (int)((*param_1 + 43200000) / 86400000) * -86400000;\n    iVar1 = iVar2 / 60000;\n    param_1[4] = (long)((double)(iVar2 % 60000) / 1000.0);\n    *(int *)((long)param_1 + 0x14) = iVar1 / 0x3c;\n    *(int *)(param_1 + 3) = iVar1 % 0x3c;\n  }\n  return;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid sub0043ccf0(long *param_1)\n\n{\n  int iVar1;\n  int iVar2;\n  \n  if (*(char *)((long)param_1 + 0x29) == '\\0') {\n    computeYMD_part_0();\n  }\n  if (*(char *)((long)param_1 + 0x2a) == '\\0') {\n    if (*(char *)(param_1 + 5) == '\\0') {\n      computeJD_part_0(param_1);\n    }\n    *(byte *)((long)param_1 + 0x2c) = *(byte *)((long)param_1 + 0x2c) & 0xfe;\n    *(undefined *)((long)param_1 + 0x2a) = 1;\n    iVar2 = (int)(*param_1 + 43200000) + (int)((*param_1 + 43200000) / 86400000) * -86400000;\n    iVar1 = iVar2 / 60000;\n    param_1[4] = (long)((double)(iVar2 % 60000) / 1000.0);\n    *(int *)((long)param_1 + 0x14) = iVar1 / 0x3c;\n    *(int *)(param_1 + 3) = iVar1 % 0x3c;\n  }\n  return;\n}\n\n\n\nSymbols:\niVar2,\niVar1,\nparam_1\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "sqlite3_rtree_query_callback", "obscured": "sub00515780"}, "symbols": ["param_5", "puVar1", "uVar2", "param_1", "param_2", "param_3", "param_4"]}, "decompiled_content": "\nundefined8\nsub00515780\n          (undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,code *param_5\n          )\n\n{\n  undefined8 *puVar1;\n  undefined8 uVar2;\n  \n  puVar1 = (undefined8 *)sqlite3_malloc(0x20);\n  if (puVar1 != (undefined8 *)0x0) {\n    puVar1[1] = param_3;\n    puVar1[2] = param_5;\n    puVar1[3] = param_4;\n    *puVar1 = 0;\n    uVar2 = sqlite3_create_function_v2\n                      (param_1,param_2,0xffffffff,5,puVar1,geomCallback,0,0,rtreeFreeCallback);\n    return uVar2;\n  }\n  if (param_5 != (code *)0x0) {\n    (*param_5)(param_4);\n  }\n  return 7;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nundefined8\nsub00515780\n          (undefined8 param_1,undefined8 param_2,undefined8 param_3,undefined8 param_4,code *param_5\n          )\n\n{\n  undefined8 *puVar1;\n  undefined8 uVar2;\n  \n  puVar1 = (undefined8 *)sqlite3_malloc(0x20);\n  if (puVar1 != (undefined8 *)0x0) {\n    puVar1[1] = param_3;\n    puVar1[2] = param_5;\n    puVar1[3] = param_4;\n    *puVar1 = 0;\n    uVar2 = sqlite3_create_function_v2\n                      (param_1,param_2,0xffffffff,5,puVar1,geomCallback,0,0,rtreeFreeCallback);\n    return uVar2;\n  }\n  if (param_5 != (code *)0x0) {\n    (*param_5)(param_4);\n  }\n  return 7;\n}\n\n\n\nSymbols:\nparam_5,\npuVar1,\nuVar2,\nparam_1,\nparam_2,\nparam_3,\nparam_4\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "fts3MatchinfoSize", "obscured": "sub00432590"}, "symbols": ["iVar3", "param_2", "param_1", "uVar2", "iVar1"]}, "decompiled_content": "\nlong sub00432590(long param_1,char param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (param_2 < 'z') {\n    if (param_2 < 'c') {\n      if (param_2 == 'a') goto LAB_00432610;\n      if (param_2 == 'b') {\n        iVar3 = *(int *)(param_1 + 8) + 0x1f;\n        iVar1 = *(int *)(param_1 + 8) + 0x3e;\n        if (-1 < iVar3) {\n          iVar1 = iVar3;\n        }\n        return (long)((iVar1 >> 5) * *(int *)(param_1 + 0xc));\n      }\n    }\n    else {\n      uVar2 = 1L << (param_2 + 0x9dU & 0x3f);\n      if ((uVar2 & 0x2801) != 0) {\n        return 1;\n      }\n      if ((uVar2 & 0x10200) != 0) {\nLAB_00432610:\n        return (long)*(int *)(param_1 + 8);\n      }\n      if (param_2 == 'y') {\n        return (long)(*(int *)(param_1 + 8) * *(int *)(param_1 + 0xc));\n      }\n    }\n  }\n  return (long)(*(int *)(param_1 + 8) * *(int *)(param_1 + 0xc) * 3);\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nlong sub00432590(long param_1,char param_2)\n\n{\n  int iVar1;\n  ulong uVar2;\n  int iVar3;\n  \n  if (param_2 < 'z') {\n    if (param_2 < 'c') {\n      if (param_2 == 'a') goto LAB_00432610;\n      if (param_2 == 'b') {\n        iVar3 = *(int *)(param_1 + 8) + 0x1f;\n        iVar1 = *(int *)(param_1 + 8) + 0x3e;\n        if (-1 < iVar3) {\n          iVar1 = iVar3;\n        }\n        return (long)((iVar1 >> 5) * *(int *)(param_1 + 0xc));\n      }\n    }\n    else {\n      uVar2 = 1L << (param_2 + 0x9dU & 0x3f);\n      if ((uVar2 & 0x2801) != 0) {\n        return 1;\n      }\n      if ((uVar2 & 0x10200) != 0) {\nLAB_00432610:\n        return (long)*(int *)(param_1 + 8);\n      }\n      if (param_2 == 'y') {\n        return (long)(*(int *)(param_1 + 8) * *(int *)(param_1 + 0xc));\n      }\n    }\n  }\n  return (long)(*(int *)(param_1 + 8) * *(int *)(param_1 + 0xc) * 3);\n}\n\n\n\nSymbols:\niVar3,\nparam_2,\nparam_1,\nuVar2,\niVar1\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "notValidImpl.isra.0", "obscured": "sub004556e0"}, "symbols": ["pcVar1", "param_4", "param_5", "param_2", "param_3", "param_1"]}, "decompiled_content": "\nvoid notValidImpl_isra_0(long *param_1,ulong param_2,undefined8 param_3,undefined *param_4,\n                        long param_5)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = \"index expressions\";\n  if ((((param_2 & 0x20) == 0) && (pcVar1 = \"CHECK constraints\", (param_2 & 4) == 0)) &&\n     (pcVar1 = \"generated columns\", (param_2 & 8) == 0)) {\n    pcVar1 = \"partial index WHERE clauses\";\n  }\n  sqlite3ErrorMsg(param_1,\"%s prohibited in %s\",param_3,pcVar1);\n  if (param_4 != (undefined *)0x0) {\n    *param_4 = 0x79;\n  }\n  while( true ) {\n    if (param_5 == 0) {\n      return;\n    }\n    if (((*(byte *)(param_5 + 4) & 3) == 0) && (0 < *(int *)(param_5 + 0x34))) break;\n    param_5 = *(long *)(param_5 + 0x10);\n  }\n  *(undefined4 *)(*param_1 + 0x54) = *(undefined4 *)(param_5 + 0x34);\n  return;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid notValidImpl_isra_0(long *param_1,ulong param_2,undefined8 param_3,undefined *param_4,\n                        long param_5)\n\n{\n  char *pcVar1;\n  \n  pcVar1 = \"index expressions\";\n  if ((((param_2 & 0x20) == 0) && (pcVar1 = \"CHECK constraints\", (param_2 & 4) == 0)) &&\n     (pcVar1 = \"generated columns\", (param_2 & 8) == 0)) {\n    pcVar1 = \"partial index WHERE clauses\";\n  }\n  sqlite3ErrorMsg(param_1,\"%s prohibited in %s\",param_3,pcVar1);\n  if (param_4 != (undefined *)0x0) {\n    *param_4 = 0x79;\n  }\n  while( true ) {\n    if (param_5 == 0) {\n      return;\n    }\n    if (((*(byte *)(param_5 + 4) & 3) == 0) && (0 < *(int *)(param_5 + 0x34))) break;\n    param_5 = *(long *)(param_5 + 0x10);\n  }\n  *(undefined4 *)(*param_1 + 0x54) = *(undefined4 *)(param_5 + 0x34);\n  return;\n}\n\n\n\nSymbols:\npcVar1,\nparam_4,\nparam_5,\nparam_2,\nparam_3,\nparam_1\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "sqlite3WalDefaultHook", "obscured": "sub004e0430"}, "symbols": ["param_2", "param_3", "param_1", "param_4"]}, "decompiled_content": "\nundefined8 sub004e0430(int param_1,undefined8 param_2,undefined8 param_3,int param_4)\n\n{\n  if (param_1 <= param_4) {\n    if (sqlite3Hooks != (code *)0x0) {\n      (*sqlite3Hooks)();\n    }\n    sqlite3_wal_checkpoint(param_2,param_3);\n    if (DAT_00563028 != (code *)0x0) {\n      (*DAT_00563028)();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nundefined8 sub004e0430(int param_1,undefined8 param_2,undefined8 param_3,int param_4)\n\n{\n  if (param_1 <= param_4) {\n    if (sqlite3Hooks != (code *)0x0) {\n      (*sqlite3Hooks)();\n    }\n    sqlite3_wal_checkpoint(param_2,param_3);\n    if (DAT_00563028 != (code *)0x0) {\n      (*DAT_00563028)();\n    }\n    return 0;\n  }\n  return 0;\n}\n\n\n\nSymbols:\nparam_2,\nparam_3,\nparam_1,\nparam_4\n\n---\n\nSYSTEM:\n"}, {"symbol_data": {"function_name": {"original": "sqlite3WhereAddLimit", "obscured": "sub00454800"}, "symbols": ["iVar3", "piVar4", "lVar1", "ppcVar2", "ppcVar7", "piVar5", "lVar6", "param_1", "param_2"]}, "decompiled_content": "\nvoid sub00454800(long param_1,long param_2)\n\n{\n  long lVar1;\n  char **ppcVar2;\n  int iVar3;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  char **ppcVar7;\n  \n  if (*(long *)(param_2 + 0x38) != 0) {\n    return;\n  }\n  if ((((*(byte *)(param_2 + 4) & 9) == 0) && (piVar4 = *(int **)(param_2 + 0x28), *piVar4 == 1)) &&\n     (*(char *)(*(long *)(piVar4 + 10) + 0x3f) == '\\x01')) {\n    piVar5 = *(int **)(param_2 + 0x48);\n    iVar3 = piVar4[0x12];\n    if (0 < *(int *)(param_1 + 0x14)) {\n      lVar6 = *(long *)(param_1 + 0x20);\n      lVar1 = lVar6 + (long)*(int *)(param_1 + 0x14) * 0x38;\n      do {\n        if ((((*(byte *)(lVar6 + 0x12) & 4) == 0) && (*(char *)(lVar6 + 0x16) == '\\0')) &&\n           (*(int *)(lVar6 + 0x1c) != iVar3)) {\n          return;\n        }\n        lVar6 = lVar6 + 0x38;\n      } while (lVar6 != lVar1);\n    }\n    if ((piVar5 != (int *)0x0) && (0 < *piVar5)) {\n      ppcVar7 = (char **)(piVar5 + 2);\n      ppcVar2 = ppcVar7 + (long)*piVar5 * 3;\n      do {\n        if (**ppcVar7 != -0x59) {\n          return;\n        }\n        if (*(int *)(*ppcVar7 + 0x2c) != iVar3) {\n          return;\n        }\n        if ((*(byte *)(ppcVar7 + 2) & 2) != 0) {\n          return;\n        }\n        ppcVar7 = ppcVar7 + 3;\n      } while (ppcVar7 != ppcVar2);\n    }\n    whereAddLimitExpr(param_1,*(undefined4 *)(param_2 + 8),\n                      *(undefined8 *)(*(long *)(param_2 + 0x60) + 0x10),iVar3,0x49);\n    if (0 < *(int *)(param_2 + 0xc)) {\n      whereAddLimitExpr(param_1,*(int *)(param_2 + 0xc),\n                        *(undefined8 *)(*(long *)(param_2 + 0x60) + 0x18),iVar3,0x4a);\n      return;\n    }\n  }\n  return;\n}\n\n", "prompt": "The user will provide a C function that was obtained by decompiling a binary\nprogram and a list of symbol names present in the function.\n\nNote that during the original compilation process, symbol names were lost, so\nthe decompiler gave the present symbols meaningless names. The system will \nanalyze the function and attempt to rename the symbols to more semantically \nmeaningful names.\n\nThe system MUST follow the format <original_name> -> <new_name> for each symbol.\nThe system MUST NOT add additional text before or after this.\n\n---\n\nUSER:\n\nFunction:\n```\nint sub_4BECE3 (uint32_t a1) { \n        uint8_t result; \n        if (a1 - 65 > 25) result = a1; \n        else result = a1 + 32; \n        return result; \n}\n```\n\nSymbols:\n`a1`,\n`result`,\n`sub_4BECE3`\n\n---\n\nSYSTEM:\na1 -> char_code\nresult -> char_code_adjusted\nsub_4BECE3 -> to_uppercase_if_alpha\n\n---\n\nUSER:\n\nFunction:\n\nvoid sub00454800(long param_1,long param_2)\n\n{\n  long lVar1;\n  char **ppcVar2;\n  int iVar3;\n  int *piVar4;\n  int *piVar5;\n  long lVar6;\n  char **ppcVar7;\n  \n  if (*(long *)(param_2 + 0x38) != 0) {\n    return;\n  }\n  if ((((*(byte *)(param_2 + 4) & 9) == 0) && (piVar4 = *(int **)(param_2 + 0x28), *piVar4 == 1)) &&\n     (*(char *)(*(long *)(piVar4 + 10) + 0x3f) == '\\x01')) {\n    piVar5 = *(int **)(param_2 + 0x48);\n    iVar3 = piVar4[0x12];\n    if (0 < *(int *)(param_1 + 0x14)) {\n      lVar6 = *(long *)(param_1 + 0x20);\n      lVar1 = lVar6 + (long)*(int *)(param_1 + 0x14) * 0x38;\n      do {\n        if ((((*(byte *)(lVar6 + 0x12) & 4) == 0) && (*(char *)(lVar6 + 0x16) == '\\0')) &&\n           (*(int *)(lVar6 + 0x1c) != iVar3)) {\n          return;\n        }\n        lVar6 = lVar6 + 0x38;\n      } while (lVar6 != lVar1);\n    }\n    if ((piVar5 != (int *)0x0) && (0 < *piVar5)) {\n      ppcVar7 = (char **)(piVar5 + 2);\n      ppcVar2 = ppcVar7 + (long)*piVar5 * 3;\n      do {\n        if (**ppcVar7 != -0x59) {\n          return;\n        }\n        if (*(int *)(*ppcVar7 + 0x2c) != iVar3) {\n          return;\n        }\n        if ((*(byte *)(ppcVar7 + 2) & 2) != 0) {\n          return;\n        }\n        ppcVar7 = ppcVar7 + 3;\n      } while (ppcVar7 != ppcVar2);\n    }\n    whereAddLimitExpr(param_1,*(undefined4 *)(param_2 + 8),\n                      *(undefined8 *)(*(long *)(param_2 + 0x60) + 0x10),iVar3,0x49);\n    if (0 < *(int *)(param_2 + 0xc)) {\n      whereAddLimitExpr(param_1,*(int *)(param_2 + 0xc),\n                        *(undefined8 *)(*(long *)(param_2 + 0x60) + 0x18),iVar3,0x4a);\n      return;\n    }\n  }\n  return;\n}\n\n\n\nSymbols:\niVar3,\npiVar4,\nlVar1,\nppcVar2,\nppcVar7,\npiVar5,\nlVar6,\nparam_1,\nparam_2\n\n---\n\nSYSTEM:\n"}]